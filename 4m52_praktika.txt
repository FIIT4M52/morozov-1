ZODB
Рахманова
Бутусов

mySQL
Лисин
Спивак

Dobblin
Лаптев
Емелин

MongoDB
Хышов
Мителькова

DyBASE
Кудрявцев
Кутьина

shelve (python)
Кочергин
Иванов

Durus
Пятугин
Макасис

"и так сдаст" (SQLAlchemy ORM)
Германович


Задание:
Структура данных
1)	логин;
2)	ФИО;
3)	номер телефона;
4)	районы проживания (заказчик);
5)	районы работы (исполнитель);
6)	размещённые заказы (разбиение по статусам, связь с объектами заказов);
7)	взятые заказы (разбиение по статусам, связь с объектами заказов);
8)	рейтинг;
Задание
1)	Создать 100, 10000, 1000000 объектов заданного класса с разными данными (данные заполнить автоматически, районы г.Н.Новгорода, логины и ФИО – собирать из нескольких шаблонов, телефоны – случайный набор чисел с +7 в начале, заказы и рейтинг – произвольные числа) и сохранить их (json/csv, ODB);
2)	Выдать упорядоченный по алфавиту полный список ФИО;
3)	Выдать упорядоченный список ФИО из определённого района проживания и с ненулевым количеством размещённых заказов (+next с заказами за последний месяц);
4)	Выдать упорядоченный по рейтингу список исполнителей в заданном районе/районах (+next с выполненными заказами за указанный период);
5)	Выдать список телефонов и ФИО недобросовестных исполнителей/заказчиков. Недобросовестность оценивать по невыполненным/отменённым заказам, если их количество больше заданного. (+next выдать список комментариев к последним пяти заказам и дать возможность по каздому элементу списка вручную ставить/убирать метку «недобросовестный»).


Для измерения быстродействия:

import cProfile 
def profile(func): 
""" Декоратор для профилирования функции""" 
	def wrapper(*args, **kwargs): 		
		profile_filename = func.__name__ + '.prof' 
		profiler = cProfile.Profile() 
		result = profiler.runcall(func, *args, **kwargs) 	profiler.dump_stats(profile_filename) 
		return result 
	return wrapper 
@profile
def  MyFunction(): 
""" Непосредственно сама функция работы с БД """